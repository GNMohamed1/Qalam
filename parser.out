Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR IDENTIFIER ASSIGN expression
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     expression -> term
Rule 6     term -> term TIMES factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> factor
Rule 9     factor -> factor POWER factor
Rule 10    factor -> INT
Rule 11    factor -> FLOAT
Rule 12    factor -> IDENTIFIER
Rule 13    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

ASSIGN               : 1
DIVIDE               : 7
FLOAT                : 11
IDENTIFIER           : 1 12
INT                  : 10
LPAREN               : 13
MINUS                : 4
PLUS                 : 3
POWER                : 9
RPAREN               : 13
TIMES                : 6
VAR                  : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 13
factor               : 6 7 8 9 9
statement            : 0
term                 : 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR IDENTIFIER ASSIGN expression
    (2) statement -> . expression
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    statement                      shift and go to state 1
    expression                     shift and go to state 4
    term                           shift and go to state 5
    factor                         shift and go to state 6

state 1

    (0) S' -> statement .



state 2

    (1) statement -> VAR . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 10


state 3

    (12) factor -> IDENTIFIER .

    POWER           reduce using rule 12 (factor -> IDENTIFIER .)
    TIMES           reduce using rule 12 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 12 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 12 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 12 (factor -> IDENTIFIER .)
    $end            reduce using rule 12 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 12 (factor -> IDENTIFIER .)


state 4

    (2) statement -> expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 5

    (5) expression -> term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    $end            reduce using rule 5 (expression -> term .)
    RPAREN          reduce using rule 5 (expression -> term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 6

    (8) term -> factor .
    (9) factor -> factor . POWER factor

    TIMES           reduce using rule 8 (term -> factor .)
    DIVIDE          reduce using rule 8 (term -> factor .)
    PLUS            reduce using rule 8 (term -> factor .)
    MINUS           reduce using rule 8 (term -> factor .)
    $end            reduce using rule 8 (term -> factor .)
    RPAREN          reduce using rule 8 (term -> factor .)
    POWER           shift and go to state 15


state 7

    (10) factor -> INT .

    POWER           reduce using rule 10 (factor -> INT .)
    TIMES           reduce using rule 10 (factor -> INT .)
    DIVIDE          reduce using rule 10 (factor -> INT .)
    PLUS            reduce using rule 10 (factor -> INT .)
    MINUS           reduce using rule 10 (factor -> INT .)
    $end            reduce using rule 10 (factor -> INT .)
    RPAREN          reduce using rule 10 (factor -> INT .)


state 8

    (11) factor -> FLOAT .

    POWER           reduce using rule 11 (factor -> FLOAT .)
    TIMES           reduce using rule 11 (factor -> FLOAT .)
    DIVIDE          reduce using rule 11 (factor -> FLOAT .)
    PLUS            reduce using rule 11 (factor -> FLOAT .)
    MINUS           reduce using rule 11 (factor -> FLOAT .)
    $end            reduce using rule 11 (factor -> FLOAT .)
    RPAREN          reduce using rule 11 (factor -> FLOAT .)


state 9

    (13) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    expression                     shift and go to state 16
    term                           shift and go to state 5
    factor                         shift and go to state 6

state 10

    (1) statement -> VAR IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 17


state 11

    (3) expression -> expression PLUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    term                           shift and go to state 18
    factor                         shift and go to state 6

state 12

    (4) expression -> expression MINUS . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    term                           shift and go to state 19
    factor                         shift and go to state 6

state 13

    (6) term -> term TIMES . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    factor                         shift and go to state 20

state 14

    (7) term -> term DIVIDE . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    factor                         shift and go to state 21

state 15

    (9) factor -> factor POWER . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    factor                         shift and go to state 22

state 16

    (13) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 23
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 17

    (1) statement -> VAR IDENTIFIER ASSIGN . expression
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term TIMES factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . factor POWER factor
    (10) factor -> . INT
    (11) factor -> . FLOAT
    (12) factor -> . IDENTIFIER
    (13) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    expression                     shift and go to state 24
    term                           shift and go to state 5
    factor                         shift and go to state 6

state 18

    (3) expression -> expression PLUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    $end            reduce using rule 3 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 19

    (4) expression -> expression MINUS term .
    (6) term -> term . TIMES factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    $end            reduce using rule 4 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 20

    (6) term -> term TIMES factor .
    (9) factor -> factor . POWER factor

    TIMES           reduce using rule 6 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 6 (term -> term TIMES factor .)
    PLUS            reduce using rule 6 (term -> term TIMES factor .)
    MINUS           reduce using rule 6 (term -> term TIMES factor .)
    $end            reduce using rule 6 (term -> term TIMES factor .)
    RPAREN          reduce using rule 6 (term -> term TIMES factor .)
    POWER           shift and go to state 15


state 21

    (7) term -> term DIVIDE factor .
    (9) factor -> factor . POWER factor

    TIMES           reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)
    $end            reduce using rule 7 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 7 (term -> term DIVIDE factor .)
    POWER           shift and go to state 15


state 22

    (9) factor -> factor POWER factor .
    (9) factor -> factor . POWER factor

    TIMES           reduce using rule 9 (factor -> factor POWER factor .)
    DIVIDE          reduce using rule 9 (factor -> factor POWER factor .)
    PLUS            reduce using rule 9 (factor -> factor POWER factor .)
    MINUS           reduce using rule 9 (factor -> factor POWER factor .)
    $end            reduce using rule 9 (factor -> factor POWER factor .)
    RPAREN          reduce using rule 9 (factor -> factor POWER factor .)
    POWER           shift and go to state 15

  ! POWER           [ reduce using rule 9 (factor -> factor POWER factor .) ]


state 23

    (13) factor -> LPAREN expression RPAREN .

    POWER           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 13 (factor -> LPAREN expression RPAREN .)


state 24

    (1) statement -> VAR IDENTIFIER ASSIGN expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    $end            reduce using rule 1 (statement -> VAR IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12

